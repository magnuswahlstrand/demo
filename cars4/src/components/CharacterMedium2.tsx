/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, {useEffect, useState} from 'react'
import {useAnimations, useGLTF, useTexture} from '@react-three/drei'
import {GLTF} from 'three-stdlib'

type GLTFResult = GLTF & {
    nodes: {
        characterMedium: THREE.SkinnedMesh
        LeftFootCtrl: THREE.Bone
        RightFootCtrl: THREE.Bone
        HipsCtrl: THREE.Bone
    }
    materials: {
        skin: THREE.MeshStandardMaterial
    }
}

function loadAnimations() {
    const {animations: idle} = useGLTF('/models/animations/idle/idle.gltf') as GLTFResult
    const {animations: run} = useGLTF('/models/animations/run/run.gltf') as GLTFResult
    const {animations: jump} = useGLTF('/models/animations/jump/jump.gltf') as GLTFResult
    return useAnimations([idle[0], idle[1], jump[1], run[1]])
}

const run = "Root|Run";
const idle = "Root|Idle";
const jump = "Root|Jump";

export function Model(props: JSX.IntrinsicElements['group']) {
    const {nodes, materials} = useGLTF('/models/characterMedium.gltf') as GLTFResult
    let texture = useTexture('models/animated-characters-2/Skins/skaterMaleA.png')
    const {ref, actions} = loadAnimations();

    const blendDuration = 0.2;
    const [selectedAction, setSelectedAction] = useState(idle);
    useEffect(() => {
        actions[selectedAction]?.reset().fadeIn(blendDuration).play()
        return () => void actions[selectedAction]?.fadeOut(blendDuration)
    }, [selectedAction])

    return (
        <group {...props} dispose={null} ref={ref}>
            <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
                <primitive object={nodes.LeftFootCtrl}/>
                <primitive object={nodes.RightFootCtrl}/>
                <primitive object={nodes.HipsCtrl}/>
            </group>
            <skinnedMesh
                onClick={() => {
                    setSelectedAction(prevState => prevState == run ? idle : run)
                }}
                geometry={nodes.characterMedium.geometry} material={materials.skin}
                material-map={texture}
                material-map-flipY={false}
                skeleton={nodes.characterMedium.skeleton} rotation={[-Math.PI / 2, 0, 0]} scale={100}/>
        </group>
    )
}

useGLTF.preload('/models/characterMedium.gltf')
