/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, {useContext, useRef} from 'react'
import {Clone, useGLTF,} from '@react-three/drei'
import {dampS, highlightModel, unHighlightModel} from "../common/utils";
import {GroupProps, useFrame} from "@react-three/fiber";
import {Color, Group, Spherical} from "three";
import {assign, createMachine} from "xstate";
import {useMachine, useSelector} from "@xstate/react";
import {GlobalStateContext} from "../common/globalContext";

interface props {
    flip: boolean
    binder: boolean
    color: Color
    // onComplete: () => void
}

interface BookContext {
    visible: boolean
}

const bookMachine = createMachine<BookContext>({
    id: "book",
    initial: "idle",
    predictableActionArguments: true,
    context: {
        visible: true,
    },
    states: {
        "idle": {
            on: {PICK_UP: "picking up"}
        },
        "picking up": {
            on: {PICK_UP_COMPLETE: "taken"}
        },
        "taken": {
            type: 'final',
            entry: ['HIDE_BOOK', 'NOTIFY']
        },
    },
}, {
    actions: {
        HIDE_BOOK: assign({visible: false}),
    }
});


export default function Model(props: props & GroupProps) {
    const globalServices = useContext(GlobalStateContext);
    const [current, send] = useMachine(bookMachine,
        {
            actions: {NOTIFY: () => globalServices.authService.send('INC')}
        });

    const picking_up = current.matches("picking up");
    const idle = current.matches("idle");
    const {visible} = current.context;

    const group = useRef<Group>(null!)
    const {
        nodes,
        materials
    } = useGLTF('https://vazxmixjsiawhamofees.supabase.co/storage/v1/object/public/models/book/model.gltf')


    const flip = props.flip ? -1 : 1

    const from = new Spherical()
    const to = new Spherical()
    useFrame(({camera}, delta) => {
        if (!group.current || !picking_up) return

        from.setFromVector3(group.current.position);
        to.setFromVector3(camera.position);
        const t = dampS(from, to, 0.1, delta, 3)

        group.current.position.setFromSpherical(from)

        if (group.current.position.distanceToSquared(camera.position) < 0.3) {
            send("PICK_UP_COMPLETE")
        }


        // const a = damp3(group.current.position, camera.position, 0.25, delta,3)
    })

    if (!visible) return null

    const eventHandlers = idle ? {
        onPointerEnter: highlightModel,
        onPointerOut: unHighlightModel,
        onClick: (e) => {
            send('PICK_UP')
            e.stopPropagation()
        }
    } : {}


    return (
        <group ref={group} {...props} dispose={null} rotation={[-Math.PI / 2, 0, flip * Math.PI / 2]}
               {...eventHandlers}
        >
            <group position={[-0.123, 0, 0]}>
                <Clone object={nodes.Cube019} deep={'materialsOnly'} material-color={props.color}/>
                <Clone object={nodes.Cube019_1} inject={<meshStandardMaterial color="white"/>}/>
                {props.binder &&
                    <Clone object={nodes.Cube019_2} deep={'materialsOnly'} inject={materials['Metal.076']}/>}
            </group>

        </group>
    )
}

useGLTF.preload('https://vazxmixjsiawhamofees.supabase.co/storage/v1/object/public/models/book/model.gltf')
